// <auto-generated />
using System;
using BoardGameTracker.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoardGameTracker.Migrations
{
    [DbContext(typeof(BoardGameContext))]
    [Migration("20181219214549_CreateDb")]
    partial class CreateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoardGameTracker.Models.BoardGameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BoardGameTracker.Models.BoardGameEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<double>("AverageRating");

                    b.Property<string>("BestPlayerCount");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<int>("MaxPlayers");

                    b.Property<int>("MaxPlaytime");

                    b.Property<int>("MinPlayers");

                    b.Property<int>("MinPlaytime");

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.Property<int>("PlayingTime");

                    b.Property<string>("Thumbnail");

                    b.Property<int>("UsersRated");

                    b.Property<DateTimeOffset>("YearPublished");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = 1, Age = 0, AverageRating = 0.0, MaxPlayers = 0, MaxPlaytime = 0, MinPlayers = 0, MinPlaytime = 0, Name = "Azul", ObjectId = 0, PlayingTime = 0, UsersRated = 0, YearPublished = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)) }
                    );
                });

            modelBuilder.Entity("BoardGameTracker.Models.GameCategoryGameEntry", b =>
                {
                    b.Property<int>("BoardGameCategoryId");

                    b.Property<int>("BoardGameEntryId");

                    b.HasKey("BoardGameCategoryId", "BoardGameEntryId");

                    b.HasIndex("BoardGameEntryId");

                    b.ToTable("GameCategoryGameEntry");
                });

            modelBuilder.Entity("BoardGameTracker.Models.GamePlaySession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int?>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamePlaySessions");

                    b.HasData(
                        new { Id = 1, Date = new DateTimeOffset(new DateTime(2018, 12, 19, 21, 45, 49, 401, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)) }
                    );
                });

            modelBuilder.Entity("BoardGameTracker.Models.GamePlaySessionPlayer", b =>
                {
                    b.Property<int>("GamePlaySessionId");

                    b.Property<int>("PlayerId");

                    b.HasKey("GamePlaySessionId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlaySessionPlayer");
                });

            modelBuilder.Entity("BoardGameTracker.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new { Id = 1, Name = "Admin", PasswordHash = new byte[] { 56, 188, 29, 154, 139, 68, 170, 219, 75, 179, 108, 164, 165, 12, 78, 93, 237, 213, 240, 240, 129, 1, 195, 245, 182, 78, 241, 34, 127, 142, 240, 181, 68, 18, 43, 154, 144, 123, 18, 55, 48, 180, 16, 159, 14, 37, 179, 5, 216, 255, 75, 246, 182, 214, 215, 213, 65, 108, 112, 21, 0, 140, 129, 221 }, PasswordSalt = new byte[] { 118, 114, 33, 38, 250, 92, 241, 72, 89, 49, 191, 255, 168, 152, 167, 10, 233, 203, 156, 8, 41, 176, 21, 103, 147, 176, 82, 160, 195, 208, 68, 31, 119, 66, 66, 226, 163, 148, 216, 146, 238, 197, 190, 13, 104, 173, 172, 130, 124, 175, 99, 165, 254, 192, 195, 83, 118, 7, 124, 121, 140, 217, 20, 45, 243, 43, 172, 28, 13, 217, 141, 187, 168, 46, 221, 250, 146, 190, 92, 27, 17, 175, 51, 119, 104, 72, 253, 121, 119, 211, 123, 71, 241, 168, 208, 59, 43, 204, 116, 35, 116, 100, 174, 7, 31, 255, 148, 166, 18, 198, 142, 78, 128, 71, 144, 14, 24, 105, 37, 203, 40, 54, 50, 11, 135, 198, 174, 109 }, Username = "admin" }
                    );
                });

            modelBuilder.Entity("BoardGameTracker.Models.PlayerRating", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("PlayerId");

                    b.Property<int?>("Rating");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new { GameId = 1, PlayerId = 1, Rating = 4 }
                    );
                });

            modelBuilder.Entity("BoardGameTracker.Models.GameCategoryGameEntry", b =>
                {
                    b.HasOne("BoardGameTracker.Models.BoardGameCategory", "BoardGameCategory")
                        .WithMany("Games")
                        .HasForeignKey("BoardGameCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGameTracker.Models.BoardGameEntry", "BoardGameEntry")
                        .WithMany("Categories")
                        .HasForeignKey("BoardGameEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGameTracker.Models.GamePlaySession", b =>
                {
                    b.HasOne("BoardGameTracker.Models.BoardGameEntry", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("BoardGameTracker.Models.GamePlaySessionPlayer", b =>
                {
                    b.HasOne("BoardGameTracker.Models.GamePlaySession", "GamePlaySession")
                        .WithMany("Players")
                        .HasForeignKey("GamePlaySessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGameTracker.Models.Player", "Player")
                        .WithMany("GamePlaySessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGameTracker.Models.PlayerRating", b =>
                {
                    b.HasOne("BoardGameTracker.Models.BoardGameEntry", "Game")
                        .WithMany("PlayerRatings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGameTracker.Models.Player", "Player")
                        .WithMany("Ratings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
